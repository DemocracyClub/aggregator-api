## ElectoralServices (object)
+ `council_id`: `CRF` (string) - Three-letter code for this council
+ name: `Cardiff Council` (string) - Name of this council
+ nation: `Wales` (string) - Name of nation
+ address: `Electoral Registration Officer\nCity of Cardiff Council\nCounty Hall Atlantic Wharf` (string) - Contact address for this council
+ postcode: `CF10 4UW` (string) - Postcode component of contact address for this council
+ email: `electoralservices@cardiff.gov.uk` (string) - Contact email address for this council's Electoral Services team
+ phone: `029 2087 2034` (string) - Telephone number for this council's Electoral Services team
+ website: `http://www.cardiff.gov.uk/` (string) - URL for this council's website
+ identifiers (array[string], fixed-type) - An array of alternative identifiers for this council. If known, this array will contain a GSS code for this council
    + `W06000015`

## Registration (object)
+ address: `Electoral Registration Officer\nCity of Cardiff Council\nCounty Hall Atlantic Wharf` (string) - Contact address for this council
+ postcode: `CF10 4UW` (string) - Postcode component of contact address for this council
+ email: `electoralservices@cardiff.gov.uk` (string) - Contact email address for this council's Electoral Services team
+ phone: `029 2087 2034` (string) - Telephone number for this council's Electoral Services team
+ website: `http://www.cardiff.gov.uk/` (string) - URL for this council's website

## Point (object)
+ type: `Point` (string)
+ coordinates: (array[number], fixed-type)
    + `-3.1137973461538473`
    + `51.52117513846153`

## PostcodeLocation (object)
+ type: `Feature` (string)
+ properties: (object, nullable)
+ geometry (Point)


## CancellationReason (enum)
+ `NO_CANDIDATES`
+ `EQUAL_CANDIDATES`
+ `UNDER_CONTESTED`
+ `CANDIDATE_DEATH`


## ValidFinderResponse (object)
+ `address_picker`: `false` (boolean) - True if we need to show this user an address picker
+ addresses (array[object]) - An array of address objects containing the addresses applicable to this request (if necessary)
+ dates (array[object], fixed-type) - An array of date objects (each describing a date on which an election or poll will take place) containing details of relevant ballots, candidates and polling station information
    + (object)
        + date: `2017-05-04` (string) - Polling day on which an election will occur
        + `polling_station`: (object) - Results for polling station search
            + `polling_station_known`: `true` (boolean) - Do we know where this user should vote?
            + `custom_finder`: (string, nullable) - Deprecated field. This will always be null.
            + `report_problem_url`: `http://wheredoivote.co.uk/report_problem/?source=testing&source_url=testing` (string, nullable) - If we provide a polling station result, this URL may be used to provide a user with a back-channel to report inaccurate data.
            + station: (object, nullable) - A [GeoJSON Feature](https://tools.ietf.org/html/rfc7946#section-3.2) describing the user's polling station (if known)
                + id: `w06000015.QK` (string)
                + type: `Feature` (string)
                + geometry: (object, nullable) - A GeoJSON [Point object](https://tools.ietf.org/html/rfc7946#section-3.1.2) object describing the location of this polling station. Optionally null if we know the address only but can't geocode a location.
                    + type: `Point` (string)
                    + coordinates: (array[number], fixed-type)
                        + `-3.119229`
                        + `51.510885`
                + properties: (object)
                    + postcode: (string) - Postcode for this polling station
                    + address: `Earlswood Social Club, 160-164 Greenway Road, Rumney` (string) - Address for this polling station
        + `advance_voting_station`: (object, fixed-type, nullable) - Advance Voting Stations
            + `name`: (string) - The name of the Advance Voting Station
            + `address`: (string) - The address of the Advance Voting Station
            + `postcode`: (string) - The postcode of the Advance Voting Station
            + `location`: (object) - A GeoJSON [Point object](https://tools.ietf.org/html/rfc7946#section-3.1.2) object describing the location of this Advance Voting Station.
                + type: `Point` (string)
                + coordinates: (array[number], fixed-type)
                    + `-3.119229`
                    + `51.510885`
            + `opening_times`: (array[array], fixed-type):
                + (array)
                    + `date`
                    + `open`
                    + `close`
        + notifications: (array[object], fixed-type) - Array of notifications to be shown to the user about special conditions to be aware of on this date.
            + (object)
                + `title`: `Some unexpected event is happening` (string)
                + `type`: `cancelled_election` (enum[string]) - Type of notification
                    + `cancelled_election`
                    + `voter_id`
                + `detail`: `Some more details` (string)
                + `url`: `https://foo.bar/baz` (string)
        + ballots: (array[object], fixed-type) - List of ballots happening on this date. It is possible for more than one ballot to occur on the same date. For example, a user may vote in a local council election and mayoral election on the same day.
            + (object)
                + `ballot_paper_id`: `local.cardiff.pontprennauold-st-mellons.2017-05-04` (string) - Identifier for this ballot
                + `ballot_title`: `Cardiff local election Pontprennau/Old St. Mellons` (string) - Friendly name for this ballot
                + `ballot_url`: `https://developers.democracyclub.org.uk/api/v1/local.cardiff.pontprennauold-st-mellons.2017-05-04/` (string) - API link for more detailed info about this ballot from the /elections endpoint
                + `poll_open_date`: `2017-05-04` (string) - Polling day for this ballot  (ISO 8601)
                + `elected_role`: `Local Councillor` (string) - Name of the role the winner(s) of this election will assume
                + metadata: (object, nullable) - Object containing information about special conditions for the user to be aware about (e.g: cancelled elections, voter id pilot). (details TBC)
                + cancelled: `true` (boolean) - True if this ballot has been cancelled
                + cancellation_reason: (CancellationReason, nullable) - If a ballot has been cancelled, this key may hold a codified reason for that ballot's cancellation
                + `replaced_by`: (string, nullable) - If a ballot has been cancelled (cancelled = true) and rescheduled for a later date, this key will hold the ballot_paper_id of the ballot that replaces it.
                + replaces: (string, nullable) - If this ballot replaces another cancelled ballot, this key will hold the ballot_paper_id of the ballot that it replaces.
                + `requires_voter_id`: `EA-2022` (enum[string], nullable) - The type of voter ID required in order to vote in this election. Nullable, or one of Electoral Fraud (Northern Ireland) Act 2002, Elections Act 2022 or one of the pilots.
                    + `EFA-2002`
                    + `EA-2022`
                    + `pilot-2018`
                    + `pilot-2019`
                + `election_id`: `local.cardiff.2017-05-04` (string) - Identifier for this ballot's parent election group
                + `election_name`: `Cardiff local election` (string) - Friendly name for this ballot's parent election group
                + `post_name`: `Pontprennau/Old St. Mellons` (string) - Name of the division or post the winner(s) of this election will represent
                + `candidates_verified`: `false` (boolean) - True if the list of candidates for this election has been confirmed against the nomination papers for this ballot. If this property is False, the candidate list is provisional or unconfirmed.
                + `voting_system` (object) - The voting system used in this election
                    + `slug`: `FPTP` (string) - One of `AMS`, `FPTP`, `PR-CL`, `sv`, `STV`
                    + `name`: `First-past-the-post` (string) - The name of this voting system (e.g: "First-past-the-post")
                    + `uses_party_lists`: `false` (boolean) - True if this voting system uses party lists
                + `hustings` (array[object], fixed-type, nullable) - Hustings related to this election
                    + (object)
                        + `title`: (string) - Title of the event
                        + `url`: (string) - URL to the event or event sign up page
                        + `starts`: (string) - Start datetime
                        + `ends`: (string) - End datetime
                        + `location`: (string) - Address of the event
                        + `postevent_url`: (string) - Any post-event URL, e.g a YouTube recording of the event
                + `seats_contested`: `1` (number) â€“ The number of candidate who will be elected
                + candidates: (array[object], fixed-type) - Array of candidate objects describing candidates that will appear on this ballot paper. In an election which uses party lists, the `candidates` array is sorted by party and `list_position` within parties. For other election types it is sorted alphabetically by candidate name.
                    + (object)
                        + `list_position`: (number, nullable) - Numeric position in party list. This value is only relevant to elections using party lists. It will always be null in First-Past-The-post elections.
                        + party: (object)
                            + `party_id`: `party:90` (string)
                            + `party_name`: `Liberal Democrats` (string)
                        + previous_party_affiliations: (array[object], fixed-type, nullable)
                            + (object)
                                + `party_id`: `party:90` (string)
                                + `party_name`: `Liberal Democrats` (string)
                        + person: (object)
                            + `ynr_id`: `23417` (number)
                            + name: `David Keigwin` (string)
                            + `absolute_url`: `https://whocanivotefor.co.uk/person/23417/david-keigwin` (string) - Link for more (human-readable) information about this candidate
                            + `email`: `dave@example.com` (string, nullable) - Email address for this candidate, if we hold it
                            + `photo_url`: (string, nullable) - URL for a photo of this candidate, if we hold one
                            + leaflets: (array[object], fixed-type, nullable) - Leaflets uploaded to electionleaflets.org and tagged with this person
                                + (object)
                                    + `leaflet_id`: `14666` (number) - The electionleaflets.org ID for this leaflet
                                    + `thumb_url`: `https://images.electionleaflets.org/thumbs/350x350/leaflets/18813566_827285407428319_685384237798419912_n.png` (string) - URL to the thumbnail image of this leaflet
                                    + `leaflet_url`: `https://electionleaflets.org/leaflets/14666/` (string) - URL to the leaflet page on electionleaflets.org
                + `wcivf_url`: `https://whocanivotefor.co.uk/elections/local.cardiff.2017-05-04/post-UTE:W05000900/pontprennauold-st-mellons` - Link for more (human-readable) information about this ballot
+ `electoral_services` (ElectoralServices, nullable) - Contact details for the user's local Electoral Services team. If we do not know the user's polling station, this can be used to provide contact info for their local council. This may be `null` if we are not able to determine the user's council.
+ `registration` (Registration, nullable) - Sometimes the contact information for registration and proxy voting is different to the electoral services contact details. Use these if they exist and your users might have questions about voter registration. If this key is null, assume the electoral services contact details can be used for electoral registration related enquiries.
+ `postcode_location` (PostcodeLocation) - A [GeoJSON Feature](https://tools.ietf.org/html/rfc7946#section-3.2) containing a [Point object](https://tools.ietf.org/html/rfc7946#section-3.1.2) describing the centroid of the input postcode. If providing a map or directions for a polling station journey, use this as the start point. This may be `null` if we are not able to accurately geocode.
