# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:

  install_and_update_dependencies:
    docker:
      - image: circleci/python:3.6.12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "Pipfile.lock" }}
          - v2-dependencies-
      - run: &install-pipenv sudo pip install pipenv --quiet --no-input
      - run: pipenv install --dev
      - run: pipenv check # before save_cache so an insecure cache is never saved
      - run: mkdir -p ~/workspace
      - run: make lambda-layers/DependenciesLayer/requirements.txt
      - persist_to_workspace:
          root: ~/repo/
          paths: [ lambda-layers/DependenciesLayer/requirements.txt ]
      - save_cache:
          when: on_success
          paths:
            - ~/.local/share/virtualenvs/
          key: v2-dependencies-{{ checksum "Pipfile.lock" }}

  test:
    docker:
      - image: circleci/python:3.6.12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "Pipfile.lock" }}
          - v2-dependencies-
      - run: *install-pipenv
      - run: pipenv run black-check
      - run: pipenv run pytest --flakes
      - run: pipenv run pytest --cov-report= --cov=aggregator
      - run: pipenv run ./manage.py build_docs
      - run: |
          if [ -n "$COVERALLS_REPO_TOKEN" ]; then
            pipenv run coveralls
          else
            echo "skipping coverage for forked PR"
          fi
      - store_artifacts:
          path: test-reports
          destination: test-reports

  sam_build_artifacts:
    docker:
      - image: amazon/aws-sam-cli-build-image-python3.6:latest
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - run: make build NO_SAM_BUILD_USE_CONTAINER=true NO_PIPENV=true
      - persist_to_workspace:
          root: ~/repo/
          paths: [ .aws-sam/build/ ]

  sam_deploy_staging:
    docker:
      - image: circleci/python:3.6.12
    working_directory: ~/repo/
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "Pipfile.lock" }}
          - v2-dependencies-
      - run: *install-pipenv
      - run: pipenv run sam deploy --config-env staging --config-file ~/repo/samconfig.toml --template-file ~/repo/.aws-sam/build/template.yaml

  sam_deploy_production:
    docker:
      - image: circleci/python:3.6.12
    working_directory: ~/repo/
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "Pipfile.lock" }}
          - v2-dependencies-
      - run: *install-pipenv
      - run: pipenv run sam deploy --config-env production --config-file ~/repo/samconfig.toml --template-file ~/repo/.aws-sam/build/template.yaml

workflows:
  version: 2
  test_build_deploy:
    jobs:
      - install_and_update_dependencies
      - test:
          requires: [ install_and_update_dependencies ]
      - sam_build_artifacts:
          requires: [ install_and_update_dependencies ]
      - sam_deploy_staging:
          requires: [ sam_build_artifacts, test ]
          context: [ deployment-staging-aggregator-api ]
          filters:
            branches:
              only: [ aws-ci-cd ]
      - sam_deploy_production:
          requires: [ sam_deploy_staging ]
          context: [ deployment-production-aggregator-api ]
          filters:
            branches:
              only: [ aws-ci-cd ]

#
# workflows:
#   version: 2
#   dev_stage_pre-prod:
#     jobs:
#       - test_dev:
#           filters:  # using regex filters requires the entire branch to match
#             branches:
#               only:  # only branches matching the below regex filters will run
#                 - dev
#                 - /user-.*/
#       - test_stage:
#           filters:
#             branches:
#               only: stage
#       - test_pre-prod:
#           filters:
#             branches:
#               only: /pre-prod(?:-.+)?$/
