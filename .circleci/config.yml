# https://circleci.com/docs/2.0/configuration-reference/

version: 2.1

jobs:

  install_and_update_dependencies:
    docker:
      - image: circleci/python:3.6.12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "Pipfile.lock" }}
          - v2-dependencies-
      - run: &install-pipenv sudo pip install pipenv --quiet --no-input
      - run: pipenv install --dev
      - run: pipenv check # before save_cache so an insecure cache is never saved
      - run: mkdir -p ~/workspace
      - run: make lambda-layers/DependenciesLayer/requirements.txt
      - persist_to_workspace:
          root: ~/repo/
          paths: [ lambda-layers/DependenciesLayer/requirements.txt ]
      - save_cache:
          when: on_success
          paths:
            - ~/.local/share/virtualenvs/
          key: v2-dependencies-{{ checksum "Pipfile.lock" }}

  test:
    docker:
      - image: circleci/python:3.6.12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "Pipfile.lock" }}
          - v2-dependencies-
      - run: *install-pipenv
      - run: pipenv run black-check
      - run: pipenv run pytest --flakes
      - run: pipenv run pytest --cov-report= --cov=aggregator --junitxml=test-results/junit.xml
      - run: SECRET_KEY=notasecretkey pipenv run ./manage.py build_docs
      - run: |
          if [ -n "$COVERALLS_REPO_TOKEN" ]; then
            pipenv run coveralls
          else
            echo "skipping coverage for forked PR"
          fi
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results


  sam_build:
    docker:
      - image: amazon/aws-sam-cli-build-image-python3.6:latest
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - run: make build NO_SAM_BUILD_USE_CONTAINER=true NO_PIPENV=true
      - persist_to_workspace:
          root: ~/repo/
          paths: [ .aws-sam/build/ ]

  sam_deploy:
    docker:
      - image: circleci/python:3.6.12
    working_directory: ~/repo/
    parameters:
      dc-environment:
        type: enum
        enum:
          - "staging"
          - "production"
      dc-public-fqdn:
        type: enum
        enum:
          - "developers.womblelabs.co.uk"
          - "developers.democracyclub.org.uk"
      dc-storage-bucket: { type: string }
    environment:
      AWS_STORAGE_BUCKET_NAME: << parameters.dc-storage-bucket >>
      DJANGO_SETTINGS_MODULE: aggregator.settings.lambda_<< parameters.dc-environment >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "Pipfile.lock" }}
          - v2-dependencies-
      - run: *install-pipenv
      - run: pipenv run python manage.py collectstatic --noinput
      - run:
          name: pipenv run sam deploy --config-env << parameters.dc-environment >>
          command: |
            pipenv run sam deploy \
              --config-file ~/repo/samconfig.toml.d/<< parameters.dc-environment >>.toml \
              --config-env << parameters.dc-environment >> \
              --template-file ~/repo/.aws-sam/build/template.yaml \
              --parameter-overrides " \
                 AppAwsStorageBucketName=$AWS_STORAGE_BUCKET_NAME \
                 AppDebug=$APP_DEBUG \
                 AppDjangoSettingsModule=$DJANGO_SETTINGS_MODULE \
                 AppPublicFqdn=<< parameters.dc-public-fqdn >> \
                 AppSecretKey=$SECRET_KEY \
                " \
            | tee sam-deploy-output.txt
      - run: make smoke-test-lambda-deploy

workflows:
  version: 2
  test_build_deploy:
    jobs:
      - install_and_update_dependencies
      - test:
          requires: [ install_and_update_dependencies ]
      - sam_build:
          requires: [ install_and_update_dependencies ]
      - sam_deploy:
          name: sam_deploy_staging
          dc-environment: staging
          dc-public-fqdn: developers.womblelabs.co.uk
          dc-storage-bucket: aggregator-api-static-assets-staging-dd49af09f6
          requires: [ sam_build, test ]
          context: [ deployment-staging-aggregator-api ]
          filters:
            branches:
              only: [ aws-ci-cd ]
      - sam_deploy:
          name: sam_deploy_production
          dc-environment: production
          dc-public-fqdn: developers.democracyclub.org.uk
          dc-storage-bucket: aggregator-api-production-static-assets-FIXME
          requires: [ sam_deploy_staging ]
          context: [ deployment-production-aggregator-api ]
          filters:
            branches:
              only: [ aws-ci-cd ]
